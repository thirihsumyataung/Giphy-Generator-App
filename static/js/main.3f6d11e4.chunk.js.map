{"version":3,"sources":["logo.svg","component/Loader.jsx","component/Giphy.jsx","App.js","reportWebVitals.js","index.js"],"names":["Loader","className","Giphy","useState","data","setData","isLoading","setIsLoading","isError","setIsError","search","setSearch","useEffect","a","axios","params","api_key","results","console","log","setTimeout","fetchData","handleSubmit","event","preventDefault","q","limit","role","renderError","value","onChange","target","type","placeholder","onClick","map","el","src","images","fixed_height","url","alt","id","App","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAAe,I,oDCSAA,EARA,WACX,OACI,qBAAKC,UAAY,SAAjB,SACI,mBAAGA,UAAY,mCC8HZC,G,MA5HD,WAAO,MAEWC,mBAAS,IAFpB,mBAENC,EAFM,KAEAC,EAFA,OAGsBF,oBAAS,GAH/B,mBAGNG,EAHM,KAGMC,EAHN,OAMiBJ,oBAAS,GAN1B,mBAMNK,EANM,KAMGC,EANH,OAQeN,mBAAS,IARxB,mBAQNO,EARM,KAQEC,EARF,KAoBjBC,qBAAU,YACK,uCAAG,4BAAAC,EAAA,6DACdJ,GAAY,GACZF,GAAa,GAFC,kBAKQO,IAAM,yCAA0C,CACtEC,OAAQ,CACJC,QAAS,sCAPC,OAKRC,EALQ,OAUdC,QAAQC,IAAIF,GACZZ,EAAQY,EAAQb,KAAKA,MAXP,kDAedK,GAAW,GACXW,YAAW,kBAAMX,GAAW,KAAQ,KACpCS,QAAQC,IAAR,MAjBc,QAmBdZ,GAAa,GAnBC,0DAAH,qDAwBXc,KACD,IAGH,IAwBMC,EAAY,uCAAG,WAAOC,GAAP,eAAAV,EAAA,6DAKjBU,EAAMC,iBACNf,GAAW,GACXF,GAAa,GAPI,kBAUKO,IAAM,sCACxB,CACIC,OAAQ,CACJC,QAAS,mCACTS,EAAGf,EACHgB,MAAO,OAfF,OAUXT,EAVW,OAkBbZ,EAAQY,EAAQb,KAAKA,MAlBR,kDAsBbK,GAAW,GACXW,YAAW,kBAAMX,GAAW,KAAQ,KAvBvB,QAyBbF,GAAa,GAzBA,0DAAH,sDA8BhB,OACI,sBAAKN,UAAY,MAAjB,UA5Cc,WAChB,GAAIO,EACH,OAAU,qBAAKP,UAAU,iDAAiD0B,KAAK,QAArE,qEA4CPC,GACD,uBAAM3B,UAAY,yCAAlB,UAEI,uBACA4B,MAAOnB,EACPoB,SAzCgB,SAACP,GACxBZ,EAAUY,EAAMQ,OAAOF,QAwCgBG,KAAK,OAAOC,YAAY,SAAShC,UAAU,iBAE3E,wBAAQiC,QAASZ,EAAcU,KAAK,SAAS/B,UAAU,sBAAvD,yBAGJ,qBAAKA,UAAY,iBAAjB,SAlECK,EACO,cAAC,EAAD,IAEJF,EAAK+B,KAAK,SAAAC,GACb,OACA,qBAAiBnC,UAAY,MAA7B,SAAmC,qBAAKA,UAAU,MAAMoC,IAAKD,EAAGE,OAAOC,aAAaC,IAAKC,IAAI,UAAnFL,EAAGM,c,MC9CVC,MATf,WACE,OACE,cAAC,IAAMC,SAAP,UACE,cAAC,EAAD,OCGSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,YCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3f6d11e4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nconst Loader = () => {\n    return (\n        <div className = \"loader\"> \n            <i className = \"fa fa-spinner fa-4x fa-spin\" />\n        </div>\n    )\n}\n\nexport default Loader ; ","import React, { useEffect , useState} from 'react';\nimport axios from 'axios'; \nimport Loader from './Loader'; \nimport Paginate from './Paginate';\nimport Pagination from 'react-js-pagination';\n//import styles from './styles.css'; \nconst Giphy = () =>  {\n    //pass the default into useState() \n        const [data, setData] = useState([]); \n        const [isLoading , setIsLoading] = useState(false); \n\n    //Error handling \n        const [isError, setIsError] = useState(false); //set state as false if no error happens yet\n    //Searching Gifs \n        const [search, setSearch] = useState(\"\");\n\n    //Pagination \n        //const [currentPage, setCurrentPage] = useState(1); \n        //const [itemsPerPage, setItemsPerPage] = useState(20); \n        //const indexOfLastItem = currentPage * itemsPerPage; \n        //const indexOfFirstItem = indexOfLastItem - itemsPerPage; \n       // const currentItems  = data.slice( indexOfFirstItem, indexOfLastItem); \n        //Page 1 : item 1 - 25 \n        //Page 2: item 26 - 50 \n        //Page 3: item 51 - 75 \n        //Page 4 : item 76 - 100; \n    useEffect(() => {\n    const fetchData = async() => { \n        setIsError (false); // No eroor until error happends. \n        setIsLoading(true); // in this function Loading is True \n\n        try { \n        const results = await axios(\"https://api.giphy.com/v1/gifs/trending\", {\n        params: {\n            api_key: \"EHJWnmARPJfgSgaToHjpuISipYUaFsmR\", \n        }\n        }); //pass it into [] empty dependency array \n        console.log(results); \n        setData(results.data.data); //console it in \n\n        }\n        catch(err){ //If we catch the error -> this code block will work \n        setIsError(true); //Error happens.\n        setTimeout(() => setIsError(false), 4000); //timer will wait for four minutes and then go back to loading \n        console.log(err); // error object will be consoled in log. \n        }\n        setIsLoading(false); \n        //Anytime state changes , it will rerender and when the state chages and rerender happens \n        // setIsLoading will set it back to false --> then it will show loading spinner \n        // we can see the spinner is loading when we refresh the page. \n    }\n        fetchData(); \n    }, []); \n    \n    //Error handling --> isLoading happens (Error in loading ) this function will work. \n    const renderGifs = () => {  \n        if (isLoading){ //Return Loader component ....\n            return <Loader/>; \n        }\n        return data.map( el=>{\n            return (\n            <div key={el.id} className = \"gif\"><img className=\"m-2\" src={el.images.fixed_height.url} alt=\"Gifs\"/></div>\n        )\n    }); \n}; \n\n    const renderError = () => { \n        if (isError){ \n         return (  <div className=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n                Unable to get Gifs , please try again in a few minutes. \n            </div>); \n        }\n    }; \n    // onChange = {searchChange}\n    //            value={search}\n\n    const handleSearchChange = (event) => { \n        setSearch(event.target.value); \n    }\n    const handleSubmit = async (event) => { \n        //dont need a fetch data anymore . alreay fetch the data \n        //and just need to search data what we already fetched \n        //const fetData = () => { \n        //need to make sure an event to prevent from default , don't want to reload it. \n        event.preventDefault(); \n        setIsError(false); \n        setIsLoading(true); \n        //Error Handling \n        try { \n        const results = await axios(\"http://api.giphy.com/v1/gifs/search\", \n            {\n                params: {\n                    api_key: \"EHJWnmARPJfgSgaToHjpuISipYUaFsmR\", \n                    q: search, \n                    limit: 1000\n                }\n            }); \n            setData(results.data.data);\n        }\n        \n        catch (err){ \n            setIsError(true); \n            setTimeout(() => setIsError(false), 4000); \n        }\n            setIsLoading(false); \n    }\n        // const pageSelected = (pageNumber) => { \n        //     setCurrentPage(pageNumber); \n        // }\n      return (\n          <div className = \"m-2\"> \n\n           {renderError()}\n           <form className = \"form-inline justify-content-center m-2\">\n\n               <input  \n               value={search}\n               onChange = {handleSearchChange} type=\"text\" placeholder=\"Search\" className=\"form-control\"\n               />\n               <button onClick={handleSubmit} type=\"submit\" className=\"btn btn-primary m-2\"> Search </button>\n           </form>\n         \n           <div className = \"container gifs\"> \n            {renderGifs()}\n            </div> \n            \n            </div>); \n    \n}\n \nexport default Giphy; \n//  <Paginate pageSelected={pageSelected}  \n//                      currentPage={currentPage} \n//                      itemsPerPage={itemsPerPage}\n//                       totalItems={data.length}/> ","import logo from './logo.svg';\nimport React from \"react\"; \nimport Giphy from \"./component/Giphy\"; \n\nimport './App.css';\n\nfunction App() {\n  return (\n    <React.Fragment> \n      <Giphy/>\n    </React.Fragment>\n    \n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './App.css'; \nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css'; \nimport 'font-awesome/css/font-awesome.css'; \nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}